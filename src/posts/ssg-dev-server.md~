SSG Dev Server | 1 | 2023-11-30 | web,svelte,html,css

After my last post on building an eBook reader with Svelte, my own paltry few Node.js files that render this website is feeling awfully lackluster. I decided to build a live-reload server, sort of like Vite but 10x worse. What I want is the ability to edit a post like this one and be able to see my changes reflect real time using a dev server. Let's make a script to do this: First, let's import sundry libraries that we'll need later.

```js
const http = require('http');
const fs = require('fs').promises;
const path = require('path');
const ws = require('ws');
const chokidar = require('chokidar');
const build = require('./build.js');
const mime = require('mime-types')
```

Now I present a basic HTTP server, with the slight twist that we inject JavaScript into the very beginning of any HTML file. Those magic two lines will interact with the websocket server we will soon spin up and on any message reload the page. Not as fancy as HMR but it's honest work.

```js
const server = http.createServer(async (req, res) => {
  let fp = req.url.slice(1);
  if (!fp) { fp = 'index.html'; }
  if ((await fs.lstat(fp)).isDirectory()) {
    fp += '/index.html';
  }

  fs.readFile(fp)
    .then(contents => {
      const mimetype = mime.lookup(fp);
      res.writeHead(200, headers = { 'Content-Type': mimetype });

      // inject javascript to interact with websocket server
      if (mimetype == 'text/html') {
        contents = `<script>
const ws = new WebSocket('ws://' + document.location.host + '/ws');
ws.onmessage = msg => { location.reload(); };
        </script>` + contents;
      }

      res.end(contents);
    })
    .catch(err => {
      res.writeHead(404);
      res.end(err.toString());
    });
});
server.listen(8000, 'localhost', () => { });
```

Here we start a websocket server and whenever we see that any file in the source directory has changed or been added, we rebuild the project and immediately afterwards tell the webpage to reload. In practice I have it such that the my build function only fully reads the posts that have been updated, so it only takes ~.1 seconds to rebuild.

```js
let con;
new ws.Server({ server, path: '/ws' })
  .on('connection', ws => { con = ws; });

chokidar.watch('../src', {})
  .on('change', async _ => {
      await build.build();
      if (con) { con.send('reload'); }
  });
```
